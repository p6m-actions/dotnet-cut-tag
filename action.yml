name: "Dotnet Cut Tag"
description: "Bumps version in Directory.Build.props and creates a git tag for .NET projects"
author: "Jimmie Fulton <jimmie.fulton@gmail.com>"

# Define the inputs for this action
inputs:
  version-level:
    description: "The version level to bump (patch, minor, major)"
    required: false
    default: "patch"
  directory-build-props-path:
    description: "Path to Directory.Build.props file"
    required: false
    default: "Directory.Build.props"
  commit-changes:
    description: "Whether to commit the version changes"
    required: false
    default: "true"
  commit-message:
    description: "Custom commit message. Use {version} as placeholder for the new version"
    required: false
    default: "Bump version to {version} [skip ci]"
  skip-push:
    description: "Skip pushing changes and tags (useful for testing)"
    required: false
    default: "false"

# Define the outputs for this action
outputs:
  version:
    description: "The new version number"
    value: ${{ steps.bump-version.outputs.version }}
  tag:
    description: "The created git tag"
    value: ${{ steps.create-tag.outputs.tag }}

# Define the runs configuration
runs:
  using: "composite"
  steps:
    - name: Bump version
      id: bump-version
      shell: bash
      run: |
        # Check if Directory.Build.props exists
        if [ ! -f "${{ inputs.directory-build-props-path }}" ]; then
          echo "Error: Directory.Build.props not found at ${{ inputs.directory-build-props-path }}"
          exit 1
        fi
        
        # Extract current version from Directory.Build.props
        current_version=$(grep -oP '<VersionPrefix>\K[^<]+' "${{ inputs.directory-build-props-path }}")
        
        if [ -z "$current_version" ]; then
          echo "Error: Could not find VersionPrefix in Directory.Build.props"
          exit 1
        fi
        
        echo "Current version: $current_version"
        
        # Parse version components
        IFS='.' read -r major minor patch <<< "$current_version"
        
        # Bump version based on input
        case "${{ inputs.version-level }}" in
          "major")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          "minor")
            minor=$((minor + 1))
            patch=0
            ;;
          "patch")
            patch=$((patch + 1))
            ;;
          *)
            echo "Error: Invalid version-level. Must be 'patch', 'minor', or 'major'"
            exit 1
            ;;
        esac
        
        new_version="$major.$minor.$patch"
        echo "New version: $new_version"
        
        # Update Directory.Build.props
        sed -i.bak "s/<VersionPrefix>$current_version<\/VersionPrefix>/<VersionPrefix>$new_version<\/VersionPrefix>/" "${{ inputs.directory-build-props-path }}"
        
        # Remove backup file
        rm "${{ inputs.directory-build-props-path }}.bak"
        
        echo "version=$new_version" >> $GITHUB_OUTPUT
    
    - name: Create git tag
      id: create-tag
      shell: bash
      run: |
        version="${{ steps.bump-version.outputs.version }}"
        tag="v$version"
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Commit changes if enabled
        if [ "${{ inputs.commit-changes }}" == "true" ]; then
          # Add and commit changes
          git add "${{ inputs.directory-build-props-path }}"
          
          # Replace {version} placeholder in commit message
          commit_message="${{ inputs.commit-message }}"
          commit_message="${commit_message//\{version\}/$version}"
          
          git commit -m "$commit_message"
          echo "Committed version changes"
        else
          echo "Skipping commit (commit-changes is false)"
        fi
        
        # Create tag
        git tag "$tag"
        echo "Created tag: $tag"
        
        # Push changes and tag if not skipped
        if [ "${{ inputs.skip-push }}" != "true" ]; then
          if [ "${{ inputs.commit-changes }}" == "true" ]; then
            git push origin HEAD
          fi
          git push origin "$tag"
          echo "Pushed changes and tag to origin"
        else
          echo "Skipping push (skip-push is true)"
        fi
        
        echo "tag=$tag" >> $GITHUB_OUTPUT

# Define the branding for the action in the GitHub Marketplace
branding:
  icon: "award"
  color: "blue"